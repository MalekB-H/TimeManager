name: CI with Docker Compose

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

jobs:
  build:
    runs-on: ubuntu-latest

    services:
      database:
        image: postgres
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U postgres"
          --health-interval=5s
          --health-timeout=5s
          --health-retries=5

    steps:
      # 1. Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v4

      # 2. Set up Docker
      - name: Set up Docker
        uses: docker/setup-buildx-action@v2

      # 3. Build and start services with docker-compose
      - name: Build and start services
        run: docker-compose up --build -d

      # 4. Check all services logs
      - name: Check all services logs
        run: docker-compose logs

      # 5. Check service status
      - name: Check service status
        run: docker-compose ps

      # 6. Wait for PostgreSQL to be ready
      - name: Wait for database to be ready
        run: |
          docker-compose exec -T database sh -c "until pg_isready -h localhost -p 5432; do sleep 5; done"

      # 7. Run API tests
      - name: Run backend tests
        run: |
          docker-compose exec -T api mix test --trace

      # 8. Run frontend tests
      - name: Run frontend tests
        run: |
          docker-compose exec -T front npm test

      # 9. Run Security Tests using OWASP ZAP
      - name: Run Security Tests
        run: |
          docker run -t owasp/zap2docker-stable zap-baseline.py -t http://localhost:8080 -r zap_report.html

      # 10. Upload ZAP Report
      - name: Upload ZAP Report
        uses: actions/upload-artifact@v2
        with:
          name: zap-report
          path: zap_report.html

      # 11. Shut down Docker Compose
      - name: Shut down Docker Compose
        run: docker-compose down
